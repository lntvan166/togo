// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/domain.go

// Package mock is a generated GoMock package.
package mock

import (
	entities "lntvan166/togo/internal/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// CompleteTask mocks base method.
func (m *MockTaskRepository) CompleteTask(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockTaskRepositoryMockRecorder) CompleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockTaskRepository)(nil).CompleteTask), id)
}

// CreateTask mocks base method.
func (m *MockTaskRepository) CreateTask(t *entities.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", t)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskRepositoryMockRecorder) CreateTask(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskRepository)(nil).CreateTask), t)
}

// DeleteAllTaskOfUser mocks base method.
func (m *MockTaskRepository) DeleteAllTaskOfUser(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllTaskOfUser", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllTaskOfUser indicates an expected call of DeleteAllTaskOfUser.
func (mr *MockTaskRepositoryMockRecorder) DeleteAllTaskOfUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllTaskOfUser", reflect.TypeOf((*MockTaskRepository)(nil).DeleteAllTaskOfUser), userID)
}

// DeleteTask mocks base method.
func (m *MockTaskRepository) DeleteTask(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskRepositoryMockRecorder) DeleteTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskRepository)(nil).DeleteTask), id)
}

// GetAllTask mocks base method.
func (m *MockTaskRepository) GetAllTask() (*[]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask")
	ret0, _ := ret[0].(*[]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskRepositoryMockRecorder) GetAllTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskRepository)(nil).GetAllTask))
}

// GetNumberOfTaskTodayByUserID mocks base method.
func (m *MockTaskRepository) GetNumberOfTaskTodayByUserID(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumberOfTaskTodayByUserID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumberOfTaskTodayByUserID indicates an expected call of GetNumberOfTaskTodayByUserID.
func (mr *MockTaskRepositoryMockRecorder) GetNumberOfTaskTodayByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumberOfTaskTodayByUserID", reflect.TypeOf((*MockTaskRepository)(nil).GetNumberOfTaskTodayByUserID), id)
}

// GetTaskByID mocks base method.
func (m *MockTaskRepository) GetTaskByID(id int) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskRepositoryMockRecorder) GetTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskRepository)(nil).GetTaskByID), id)
}

// GetTasksByUserID mocks base method.
func (m *MockTaskRepository) GetTasksByUserID(id int) (*[]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUserID", id)
	ret0, _ := ret[0].(*[]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUserID indicates an expected call of GetTasksByUserID.
func (mr *MockTaskRepositoryMockRecorder) GetTasksByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUserID", reflect.TypeOf((*MockTaskRepository)(nil).GetTasksByUserID), id)
}

// UpdateTask mocks base method.
func (m *MockTaskRepository) UpdateTask(t *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskRepositoryMockRecorder) UpdateTask(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskRepository)(nil).UpdateTask), t)
}

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// CheckLimitTaskToday mocks base method.
func (m *MockTaskUsecase) CheckLimitTaskToday(id int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLimitTaskToday", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLimitTaskToday indicates an expected call of CheckLimitTaskToday.
func (mr *MockTaskUsecaseMockRecorder) CheckLimitTaskToday(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLimitTaskToday", reflect.TypeOf((*MockTaskUsecase)(nil).CheckLimitTaskToday), id)
}

// CompleteTask mocks base method.
func (m *MockTaskUsecase) CompleteTask(id int, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteTask", id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompleteTask indicates an expected call of CompleteTask.
func (mr *MockTaskUsecaseMockRecorder) CompleteTask(id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteTask", reflect.TypeOf((*MockTaskUsecase)(nil).CompleteTask), id, username)
}

// CreateTask mocks base method.
func (m *MockTaskUsecase) CreateTask(task *entities.Task, username string) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task, username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTaskUsecaseMockRecorder) CreateTask(task, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTaskUsecase)(nil).CreateTask), task, username)
}

// DeleteTask mocks base method.
func (m *MockTaskUsecase) DeleteTask(id int, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockTaskUsecaseMockRecorder) DeleteTask(id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockTaskUsecase)(nil).DeleteTask), id, username)
}

// GetAllTask mocks base method.
func (m *MockTaskUsecase) GetAllTask() (*[]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask")
	ret0, _ := ret[0].(*[]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockTaskUsecaseMockRecorder) GetAllTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockTaskUsecase)(nil).GetAllTask))
}

// GetTaskByID mocks base method.
func (m *MockTaskUsecase) GetTaskByID(id int, username string) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskByID", id, username)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskByID indicates an expected call of GetTaskByID.
func (mr *MockTaskUsecaseMockRecorder) GetTaskByID(id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskByID", reflect.TypeOf((*MockTaskUsecase)(nil).GetTaskByID), id, username)
}

// GetTasksByUsername mocks base method.
func (m *MockTaskUsecase) GetTasksByUsername(username string) (*[]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksByUsername", username)
	ret0, _ := ret[0].(*[]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTasksByUsername indicates an expected call of GetTasksByUsername.
func (mr *MockTaskUsecaseMockRecorder) GetTasksByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksByUsername", reflect.TypeOf((*MockTaskUsecase)(nil).GetTasksByUsername), username)
}

// UpdateTask mocks base method.
func (m *MockTaskUsecase) UpdateTask(id int, username string, newTask entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", id, username, newTask)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockTaskUsecaseMockRecorder) UpdateTask(id, username, newTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockTaskUsecase)(nil).UpdateTask), id, username, newTask)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserRepository) AddUser(u *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserRepositoryMockRecorder) AddUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserRepository)(nil).AddUser), u)
}

// DeleteUserByID mocks base method.
func (m *MockUserRepository) DeleteUserByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepositoryMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByID), id)
}

// GetAllUsers mocks base method.
func (m *MockUserRepository) GetAllUsers() ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserRepository)(nil).GetAllUsers))
}

// GetPlanByID mocks base method.
func (m *MockUserRepository) GetPlanByID(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlanByID", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlanByID indicates an expected call of GetPlanByID.
func (mr *MockUserRepositoryMockRecorder) GetPlanByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlanByID", reflect.TypeOf((*MockUserRepository)(nil).GetPlanByID), id)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(id int) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), id)
}

// GetUserByName mocks base method.
func (m *MockUserRepository) GetUserByName(username string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", username)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserRepositoryMockRecorder) GetUserByName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserRepository)(nil).GetUserByName), username)
}

// GetUserIDByUsername mocks base method.
func (m *MockUserRepository) GetUserIDByUsername(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUsername", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUsername indicates an expected call of GetUserIDByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserIDByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserIDByUsername), username)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(u *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), u)
}

// MockUserUsecase is a mock of UserUsecase interface.
type MockUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUsecaseMockRecorder
}

// MockUserUsecaseMockRecorder is the mock recorder for MockUserUsecase.
type MockUserUsecaseMockRecorder struct {
	mock *MockUserUsecase
}

// NewMockUserUsecase creates a new mock instance.
func NewMockUserUsecase(ctrl *gomock.Controller) *MockUserUsecase {
	mock := &MockUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUsecase) EXPECT() *MockUserUsecaseMockRecorder {
	return m.recorder
}

// CheckUserExist mocks base method.
func (m *MockUserUsecase) CheckUserExist(username string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExist", username)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckUserExist indicates an expected call of CheckUserExist.
func (mr *MockUserUsecaseMockRecorder) CheckUserExist(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExist", reflect.TypeOf((*MockUserUsecase)(nil).CheckUserExist), username)
}

// DeleteUserByID mocks base method.
func (m *MockUserUsecase) DeleteUserByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserUsecaseMockRecorder) DeleteUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserUsecase)(nil).DeleteUserByID), id)
}

// GetAllUsers mocks base method.
func (m *MockUserUsecase) GetAllUsers() ([]*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserUsecaseMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserUsecase)(nil).GetAllUsers))
}

// GetMaxTaskByUserID mocks base method.
func (m *MockUserUsecase) GetMaxTaskByUserID(id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxTaskByUserID", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxTaskByUserID indicates an expected call of GetMaxTaskByUserID.
func (mr *MockUserUsecaseMockRecorder) GetMaxTaskByUserID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxTaskByUserID", reflect.TypeOf((*MockUserUsecase)(nil).GetMaxTaskByUserID), id)
}

// GetPlan mocks base method.
func (m *MockUserUsecase) GetPlan(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlan", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlan indicates an expected call of GetPlan.
func (mr *MockUserUsecaseMockRecorder) GetPlan(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlan", reflect.TypeOf((*MockUserUsecase)(nil).GetPlan), username)
}

// GetUserByID mocks base method.
func (m *MockUserUsecase) GetUserByID(id int) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserUsecaseMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserUsecase)(nil).GetUserByID), id)
}

// GetUserIDByUsername mocks base method.
func (m *MockUserUsecase) GetUserIDByUsername(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByUsername", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByUsername indicates an expected call of GetUserIDByUsername.
func (mr *MockUserUsecaseMockRecorder) GetUserIDByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByUsername", reflect.TypeOf((*MockUserUsecase)(nil).GetUserIDByUsername), username)
}

// Login mocks base method.
func (m *MockUserUsecase) Login(user *entities.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserUsecaseMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserUsecase)(nil).Login), user)
}

// Register mocks base method.
func (m *MockUserUsecase) Register(user *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserUsecaseMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserUsecase)(nil).Register), user)
}

// UpdateUser mocks base method.
func (m *MockUserUsecase) UpdateUser(u *entities.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserUsecaseMockRecorder) UpdateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserUsecase)(nil).UpdateUser), u)
}

// UpgradePlan mocks base method.
func (m *MockUserUsecase) UpgradePlan(userID int, plan string, maxTodo int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradePlan", userID, plan, maxTodo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradePlan indicates an expected call of UpgradePlan.
func (mr *MockUserUsecaseMockRecorder) UpgradePlan(userID, plan, maxTodo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradePlan", reflect.TypeOf((*MockUserUsecase)(nil).UpgradePlan), userID, plan, maxTodo)
}

// MockAppCrypto is a mock of AppCrypto interface.
type MockAppCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockAppCryptoMockRecorder
}

// MockAppCryptoMockRecorder is the mock recorder for MockAppCrypto.
type MockAppCryptoMockRecorder struct {
	mock *MockAppCrypto
}

// NewMockAppCrypto creates a new mock instance.
func NewMockAppCrypto(ctrl *gomock.Controller) *MockAppCrypto {
	mock := &MockAppCrypto{ctrl: ctrl}
	mock.recorder = &MockAppCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppCrypto) EXPECT() *MockAppCryptoMockRecorder {
	return m.recorder
}

// ComparePassword mocks base method.
func (m *MockAppCrypto) ComparePassword(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComparePassword", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ComparePassword indicates an expected call of ComparePassword.
func (mr *MockAppCryptoMockRecorder) ComparePassword(password, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComparePassword", reflect.TypeOf((*MockAppCrypto)(nil).ComparePassword), password, hash)
}

// HashPassword mocks base method.
func (m *MockAppCrypto) HashPassword(password string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockAppCryptoMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockAppCrypto)(nil).HashPassword), password)
}
